# Orb 'circleci/aws-cli@0.1.16' resolved to 'circleci/aws-cli@0.1.16'
version: 2
jobs:
  setup:
    docker:
    - image: circleci/node:10.12
    working_directory: ~/checkout
    steps:
    - checkout
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "app/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: install
        command: npm install
        working_directory: app
    - save_cache:
        key: npm-deps-{{ .Branch }}-{{ checksum "app/package-lock.json"}}
        paths:
        - app/node_modules
    - run:
        name: test
        command: |
          sudo npm install -g ask-cli@2.1.1 --unsafe-perm
          mkdir -p ~/.ask
          MecabAPI_URL=${MecabAPI_URL}/test
          echo "${ASK_CLI_CONFIG}" > ~/.ask/cli_config
          npm test
        working_directory: app
  deploy:
    docker:
    - image: circleci/python:2.7-stretch
    working_directory: ~/checkout
    steps:
    - checkout
    - run:
        name: Install AWS CLI
        command: |
          if which aws > /dev/null; then
            echo "The AWS CLI is already installed. Skipping."
            exit 0
          fi

          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install awscli --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - restore_cache:
        keys:
        - npm-deps-{{ .Branch }}-{{ checksum "app/package-lock.json"}}
        - npm-deps-{{ .Branch }}
        - npm-deps-
    - run:
        name: build
        command: |
          npm run build
        working_directory: app
    - deploy:
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            RUNLEVEL="INFO"
            APIURL=${MecabAPI_URL}/production
            AWS_DEFAULT_REGION=${PRODUCTION_REGION}
          else
            RUNLEVEL="DEBUG"
            APIURL=${MecabAPI_URL}/test
            AWS_DEFAULT_REGION=${TEST_REGION}
          fi
          aws cloudformation package --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashskill --template-file template.yml --output-template-file packaged-template.yml
          aws cloudformation deploy --template-file packaged-template.yml --stack-name=ThrowTrashSkill --parameter-overrides AppID=${APPID} RunLevel=${RUNLEVEL} ApiUrl=${APIURL} ReminderProductID=${REMINDER_PRODUCT_ID} --role-arn ${CloudFormationRole} --capabilities CAPABILITY_NAMED_IAM
        working_directory: deploy
workflows:
  all_build:
    jobs:
    - setup:
        context: aws-test
    - deploy:
        requires:
        - setup
        context: aws-deploy
  version: 2

# Original config.yml file:
# version: 2.1
# orbs:
#   aws-cli: circleci/aws-cli@0.1.16
# 
# jobs:
#   setup:
#     docker:
#       - image: circleci/node:10.12
#     working_directory: ~/checkout
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"app/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - run:
#           name: install
#           command: npm install
#           working_directory: app
#       - save_cache:
#           key: npm-deps-{{ .Branch }}-{{ checksum \"app/package-lock.json\"}}
#           paths:
#             - app/node_modules
#       - run:
#           name: test
#           command: |
#             sudo npm install -g ask-cli@2.1.1 --unsafe-perm
#             mkdir -p ~/.ask
#             MecabAPI_URL=${MecabAPI_URL}/test
#             echo \"${ASK_CLI_CONFIG}\" > ~/.ask/cli_config
#             npm test
#           working_directory: app
#   deploy:
#     executor: aws-cli/default
#     working_directory: ~/checkout
#     steps:
#       - checkout
#       - aws-cli/install
#       - restore_cache:
#           keys:
#             - npm-deps-{{ .Branch }}-{{ checksum \"app/package-lock.json\"}}
#             - npm-deps-{{ .Branch }}
#             - npm-deps-
#       - run:
#           name: build
#           command: |
#             npm run build
#           working_directory: app
#       - deploy: 
#           command: | 
#             if [ \"${CIRCLE_BRANCH}\" == \"master\" ]; then
#               RUNLEVEL=\"INFO\"
#               APIURL=${MecabAPI_URL}/production
#               AWS_DEFAULT_REGION=${PRODUCTION_REGION}
#             else
#               RUNLEVEL=\"DEBUG\"
#               APIURL=${MecabAPI_URL}/test
#               AWS_DEFAULT_REGION=${TEST_REGION}
#             fi
#             aws cloudformation package --s3-bucket lambda-function-deployment-${AWS_DEFAULT_REGION} --s3-prefix throwtrashskill --template-file template.yml --output-template-file packaged-template.yml
#             aws cloudformation deploy --template-file packaged-template.yml --stack-name=ThrowTrashSkill --parameter-overrides AppID=${APPID} RunLevel=${RUNLEVEL} ApiUrl=${APIURL} ReminderProductID=${REMINDER_PRODUCT_ID} --role-arn ${CloudFormationRole} --capabilities CAPABILITY_NAMED_IAM
#           working_directory: deploy
# 
# workflows:
#   all_build:
#     jobs:
#       - setup:
#           context: aws-test
#       - deploy:
#           context: aws-deploy
#           requires:
#             - setup